import re
import random
import logging
from typing import Dict, Any, List
from collections import defaultdict

from fastapi import FastAPI
from fastapi.exceptions import RequestValidationError
from fastapi.responses import PlainTextResponse
from pydantic import BaseModel

from tetris import TetrisField
from snake import SnakeField


logger = logging.getLogger('uvicorn.error')
logger.setLevel(logging.DEBUG)


class Nlu(BaseModel):
    tokens: List[str]


class Request(BaseModel):
    command: str
    original_utterance: str
    type: str
    #payload: Dict[Any, Any]
    nlu: Nlu


class Session(BaseModel):
    session_id: str
    user_id: str
    message_id: int
    skill_id: str
    #auth_token: str
    #new: bool


class Item(BaseModel):
    meta: Dict[Any, Any]
    request: Request
    session: Session
    version: str


###

def countable(n, one, few, many):
    if n % 10 == 1:
        return f'{n} {one}'
    if n % 10 in {2, 3, 4}:
        return f'{n} {few}'
    return f'{n} {many}'


###

class Response:
    def __init__(self, text, tts=None, buttons=[], cards={}):
        self.text = text
        self.tts = to_tts(tts or text)
        self.buttons = buttons
        self.cards = cards

    def json(self):
        ret = {
            'text': self.text,
            'tts': self.tts,
            'end_session': False
        }
        if self.buttons:
            ret['buttons'] = [{'title': b} for b in self.buttons]
        if self.cards:
            ret['commands'] = self.cards
        return ret


def to_tts(s):
    return re.sub('{.*?}{(.*?)}', r'\1', s)


class EndSession(Exception):
    def __init__(self, *args, **kwargs):
        self.resp = Response(*args, **kwargs)


def is_similar(cls, a, b):
    def collate(s):
        return cls._collate.get(s, s)
    return collate(a.casefold()) == collate(b.casefold())


class StateMachine:
    _collate = {}
    _inhabited_by = None

    similar = {}

    def __init_subclass__(cls, /, **kwargs):
        super().__init_subclass__(**kwargs)
        for best, good in cls.similar.items():
            for alias in good:
                cls._collate[alias] = best

    def input(match_spec=None):
        def matches(cls, request: Request):
            #print(match_spec)
            if match_spec is None:
                return True
            elif isinstance(match_spec, list):
                return len(match_spec) == len(request.nlu.tokens) and all(
                    is_similar(cls, a, b)
                    for a, b in zip(match_spec, request.nlu.tokens)
                )
            elif isinstance(match_spec, str):
                return is_similar(cls, match_spec, request.command)
            elif isinstance(match_spec, set):
                return all(
                    any(
                        is_similar(cls, required, present)
                        for present in request.nlu.tokens)
                    for required in match_spec
                )

        def decorator(func):
            if not hasattr(func, '_matches'):
                func._matches = []
            func._matches.append(matches)
            return func

        return decorator

    def need_state(*state):
        def decorator(func):
            func._need_state = state
            return func

        return decorator

    def parse(self, request: Request):
        if self._inhabited_by is not None:
            try:
                return self._inhabited_by.parse(request)
            except EndSession as e:
                self._inhabited_by = None
                return e.resp
        logger.info(f'dispatching request {request}')
        for name, method in type(self).__dict__.items():
            if hasattr(method, '_matches'):
                logger.info(f'testing method {name}')
                if any(matches(type(self), request)
                       for matches in method._matches):
                    logger.info('input matches')
                    if ((not hasattr(method, '_need_state'))
                            or self.state in method._need_state):
                        logger.info('state correct. matched.')
                    else:
                        logger.info('state incorrect')
                else:
                    logger.info("input doesn't match")
            if (
                    hasattr(method, '_matches')
                    and any(
                        matches(type(self), request)
                        for matches in method._matches)
                    and ((not hasattr(method, '_need_state'))
                         or self.state in method._need_state)):
                return method(self)
        return '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞'

    def inhabit(self, state_machine):
        assert self._inhabited_by is None
        state_machine.inhabitor = self
        self._inhabited_by = state_machine

    def __init__(self):
        self.state = None


# BLACKJACK:

class Card:
    def __init__(self, suit, number):
        self.suit = suit
        self.number = number

    def __repr__(self):
        tts_number = {
            6: '—à–µ—Å—Ç—ë—Ä–∫–∞',
            7: '—Å–µ–º—ë—Ä–∫–∞',
            8: '–≤–æ—Å—å–º—ë—Ä–∫–∞',
            9: '–¥–µ–≤—è—Ç–∫–∞',
            10: '–¥–µ—Å—è—Ç–∫–∞',
            'J': '–≤–∞–ª–µ—Ç',
            'Q': '–¥–∞–º–∞',
            'K': '–∫–æ—Ä–æ–ª—å',
            'A': '—Ç—É–∑',
        }[self.number]

        tts_suit = {
            '‚ô†Ô∏è': '–ø–∏–∫',
            '‚ô¶Ô∏è': '–±—É–±–µ–Ω',
            '‚ô£Ô∏è': '–∫—Ä–µ—Å—Ç–µ–π',
            '‚ô•Ô∏è': '—á–µ—Ä–≤–µ–π'
        }[self.suit]

        return f'{{{self.number}{self.suit}}}{{{tts_number} {tts_suit}}}'

    def value(self):
        return self.number if isinstance(self.number, int) else {
            'J': 2,
            'Q': 3,
            'K': 4,
            'A': 11
        }[self.number]


class Game21(StateMachine):
    similar = {
        '–µ—â—ë': ['–µ—â–µ'],
    }

    DECK = [
        Card(suit, number)
        for suit in ['‚ô†Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è', '‚ô•Ô∏è']
        for number in list(range(6, 11)) + ['J', 'Q', 'K', 'A']
    ]

    def __init__(self):
        self.deck = self.DECK.copy()
        random.shuffle(self.deck)
        self.hand = []

    def get_card(self):
        card = self.deck.pop()
        self.hand.append(card)
        return card

    def hand_value(self, hand=None):
        if hand is None:
            hand = self.hand
        return sum(card.value() for card in hand)

    def hand_str(self, hand=None):
        if hand is None:
            hand = self.hand
        return " ".join(repr(card) for card in hand)

    def start(self):
        self.state = ''
        return Response(
            '–ò–≥—Ä–∞–µ–º –≤ –¥–≤–∞–¥—Ü–∞—Ç—å –æ–¥–Ω–æ!'
            ' –ß—Ç–æ–±—ã –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É, {–Ω–∞–ø–∏—à–∏—Ç–µ}{—Å–∫–∞–∂–∏—Ç–µ} "–ï—â—ë!".'
            ' –ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã, {–Ω–∞–ø–∏—à–∏—Ç–µ}{—Å–∫–∞–∂–∏—Ç–µ} "–•–≤–∞—Ç–∏—Ç!".'
            '\n\n'
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É —ç—Ç–æ–≥–æ –æ—Ç–ª–∞–¥—á–∏–∫–∞ –µ—Å—Ç—å –Ω–µ–∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è'
            ' —Ñ–∏—á–∞, –∫–æ—Ç–æ—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –µ–≥–æ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ "—Ö–≤–∞—Ç–∏—Ç".'
            ' –ß—Ç–æ–±—ã —Å–µ—Å—Å–∏—è –æ—Ç–ª–∞–¥—á–∏–∫–∞ –Ω–µ —Ä–≤–∞–ª–∞—Å—å, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å'
            ' –∫–æ–º–∞–Ω–¥—É "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ" –≤–º–µ—Å—Ç–æ –∫–æ–º–∞–Ω–¥—ã "—Ö–≤–∞—Ç–∏—Ç". –í–æ–∑–º–æ–∂–Ω–æ,'
            ' –∞–≤—Ç–æ—Ä–∞–º –∑–∞–¥–∞–Ω–∏–π —Å–ª–µ–¥–æ–≤–∞–ª–æ –±—ã –ø—Ä–∏ –∏—Ö —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —É—á–µ—Å—Ç—å —Ç–æ, –∫–∞–∫'
            ' —Ä–∞–±–æ—Ç–∞–µ—Ç ^–æ—Ç–ª–∞–¥—á–∏–∫^, –Ω–µ ^—Å—á–∏—Ç–∞–µ—Ç–µ^?'
            '\n\n'
            f'–í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –≤–∞—à–∞ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞: {self.get_card()}.\n'
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤: {self.hand_value()}\n\n'
            '–ï—â—ë –∏–ª–∏ —Ö–≤–∞—Ç–∏—Ç?'
        )

    @StateMachine.input({'–µ—â—ë'})
    def pick(self):
        assert self.hand_value() < 21
        card = self.get_card()
        message = f'–í—ã –≤—ã—Ç—è–Ω—É–ª–∏ –∫–∞—Ä—Ç—É {card}.\n\n'
        if self.hand_value() == 21:
            message += '–í—ã –Ω–∞–±—Ä–∞–ª–∏ —Ä–æ–≤–Ω–æ {21}{–¥–≤–∞–¥—Ü–∞—Ç—å –æ–¥–Ω–æ} –æ—á–∫–æ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏!'
            raise EndSession(message)
        elif self.hand_value() > 21:
            if self.hand_value() < 25:
                message += f'–ü–µ—Ä–µ–±–æ—Ä! –£ –≤–∞—Å –æ–∫–∞–∑–∞–ª–æ—Å—å {self.hand_value()} –æ—á–∫–∞.'
            else:
                message += f'–ü–µ—Ä–µ–±–æ—Ä! –£ –≤–∞—Å –æ–∫–∞–∑–∞–ª–æ—Å—å {self.hand_value()} –æ—á–∫–æ–≤.'
            raise EndSession(message)
        else:
            message += f'–í–∞—à–∞ —Ä—É–∫–∞: {self.hand_str()}\n'
            message += f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤: {self.hand_value()}\n\n'
            message += '–ï—â—ë –∏–ª–∏ —Ö–≤–∞—Ç–∏—Ç?'
            return message

    @StateMachine.input({'–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'})
    @StateMachine.input({'—Ö–≤–∞—Ç–∏—Ç'})
    def enough(self):
        dealer_hand = []
        while self.hand_value(dealer_hand) <= 17:
            dealer_hand.append(self.deck.pop())

        dealer_value = self.hand_value(dealer_hand)
        if dealer_value > 21 or dealer_value < self.hand_value():
            message = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!\n\n'
        else:
            message = '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.\n\n'
        message += f'–†—É–∫–∞ –±–∞–Ω–∫–∏—Ä–∞: {self.hand_str(dealer_hand)}\n'
        message += f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –±–∞–Ω–∫–∏—Ä–∞: {dealer_value}'
        raise EndSession(message)


# FOOD OR NOT:

class FoodOrNot(StateMachine):
    FOOD = [
        (True, '{üçá}{–≤–∏–Ω–æ–≥—Ä–∞–¥}'),
        (True, '{üçâ}{–∞—Ä–±—É–∑}'),
        (True, '{üçä}{–º–∞–Ω–¥–∞—Ä–∏–Ω}'),
        (True, '{üçå}{–±–∞–Ω–∞–Ω}'),
        (True, '{üçç}{–∞–Ω–∞–Ω–∞—Å}'),
        (True, '{ü•≠}{–º–∞–Ω–≥–æ}'),
        (True, '{üçé}{—è–±–ª–æ–∫–æ}'),
        (True, '{üçê}{–≥—Ä—É—à—É}'),
        (True, '{üçë}{–ø–µ—Ä—Å–∏–∫}'),
        (True, '{üçí}{–≤–∏—à–Ω—é}'),
        (True, '{üçì}{–∫–ª—É–±–Ω–∏–∫—É}'),
        (True, '{ü´ê}{—á–µ—Ä–Ω–∏–∫—É}'),
        (True, '{ü•ù}{–∫–∏–≤–∏}'),
        (True, '{üçÖ}{–ø–æ–º–∏–¥–æ—Ä}'),
        (True, '{ü••}{–∫–æ–∫–æ—Å}'),
        (True, '{ü•ë}{–∞–≤–æ–∫–∞–¥–æ}'),
        (True, '{üçÜ}{–±–∞–∫–ª–∞–∂–∞–Ω}'),
        (True, '{ü•î}{–∫–∞—Ä—Ç–æ—à–∫—É}'),
        (True, '{üåΩ}{–∫—É–∫—É—Ä—É–∑—É}'),
        (True, '{üå∂Ô∏è}{–ø–µ—Ä–µ—Ü}'),
        (True, '{ü•í}{–æ–≥—É—Ä–µ—Ü}'),
        (True, '{üçû}{—Ö–ª–µ–±}'),
        (True, '{ü•ê}{–∫—Ä—É–∞—Å—Å–∞–Ω}'),
        (True, '{ü•ñ}{–±–∞–≥–µ—Ç}'),
        (True, '{üßÄ}{—Å—ã—Ä}'),
        (True, '{üçï}{–ø–∏—Ü—Ü—É}'),
        (True, '{ü•™}{–±—É—Ç–µ—Ä–±—Ä–æ–¥}'),
        (True, '{üçô}{–æ–Ω–∏–≥–∏—Ä–∏}'),
        (True, '{üçö}{—Ä–∏—Å}'),
        (True, '{üçù}{—Å–ø–∞–≥–µ—Ç—Ç–∏}'),
        (True, '{üç£}{—Å—É—à–∏}'),
        (True, '{üç®}{–º–æ—Ä–æ–∂–µ–Ω–æ–µ}'),
        (True, '{ü•ß}{–ø–∏—Ä–æ–≥}'),
        (True, '{üç´}{—à–æ–∫–æ–ª–∞–¥}'),

        (False, '{üï≥Ô∏è}{–¥—ã—Ä—É}'),
        (False, '{üí£}{–±–æ–º–±–∞}'),
        (False, '{üî™}{–Ω–æ–∂}'),
        (False, '{üß≠}{–∫–æ–º–ø–∞—Å}'),
        (False, '{üß±}{—Å—Ç–µ–Ω—É}'),
        (False, '{üõ¢Ô∏è}{–Ω–µ—Ñ—Ç—å}'),
        (False, '{üß≥}{—á–µ–º–æ–¥–∞–Ω}'),
        (False, '{‚è∞}{–±—É–¥–∏–ª—å–Ω–∏–∫}'),
        (False, '{üå°Ô∏è}{–≥—Ä–∞–¥—É—Å–Ω–∏–∫}'),
        (False, '{üß®}{–¥–∏–Ω–∞–º–∏—Ç}'),
        (False, '{ü™Å}{–≤–æ–∑–¥—É—à–Ω—ã–π –∑–º–µ–π}'),
        (False, '{üñºÔ∏è}{–∫–∞—Ä—Ç–∏–Ω—É}'),
        (False, '{üíΩ}{–¥–∏—Å–∫}'),
        (False, '{üíæ}{–¥–∏—Å–∫–µ—Ç—É}'),
        (False, '{üì∫}{—Ç–µ–ª–µ–≤–∏–∑–æ—Ä}'),
        (False, '{üì∑}{—Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç}'),
        (False, '{üìº}{–∫–∞—Å—Å–µ—Ç—É}'),
        (False, '{üîç}{–ª—É–ø—É}'),
        (False, '{üí°}{–ª–∞–º–ø–æ—á–∫—É}'),
        (False, '{üìñ}{–∫–Ω–∏–≥—É}'),
        (False, '{üìé}{—Å–∫—Ä–µ–ø–∫—É}'),
        (False, '{üìè}{–ª–∏–Ω–µ–π–∫—É}'),
        (False, '{üóùÔ∏è}{–∫–ª—é—á}'),
        (False, '{üî®}{–º–æ–ª–æ—Ç–æ–∫}'),
        (False, '{ü™ì}{—Ç–æ–ø–æ—Ä}'),
        (False, '{ü™ö}{–ø–∏–ª–∞}'),
        (False, '{üóúÔ∏è}{—Å—Ç—Ä—É–±—Ü–∏–Ω—É}'),
        (False, '{üß≤}{–º–∞–≥–Ω–∏—Ç}'),
        (False, '{üî≠}{—Ç–µ–ª–µ—Å–∫–æ–ø}'),
        (False, '{ü™†}{–≤–∞–Ω—Ç—É–∑}'),
        (False, '{üßπ}{–≤–µ–Ω–∏–∫}'),
        (False, '{üßΩ}{–º–æ—á–∞–ª–∫—É}'),
    ]

    def start(self):
        self.state = 'playing'
        self.n_correct = 0
        self.current_test = random.choice(self.FOOD)
        return Response(
            '–ò–≥—Ä–∞–µ–º –≤ —Å—ä–µ–¥–æ–±–Ω–æ-–Ω–µ—Å—ä–µ–¥`–æ–±–Ω–æ!'
            ' –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ª–∏–±–æ "—Å—ä–µ–º" –ª–∏–±–æ "–≤—ã–±—Ä–æ—à—É".'
            '\n\n'
            f'–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: —Å—ä–µ–ª–∏ –ª–∏ –±—ã –≤—ã {self.current_test[1]}?'
        )

    @StateMachine.input({'—Å—ä–µ–º'})
    @StateMachine.input({'–µ–º'})
    @StateMachine.input({'–¥–∞'})
    @StateMachine.need_state('playing')
    def eat(self):
        if self.current_test[0]:
            self.n_correct += 1
            message = f'–ü—Ä–∞–≤–∏–ª—å–Ω–æ! {self.current_test[1]} –º–æ–∂–Ω–æ —Å–º–µ–ª–æ –∫—É—à–∞—Ç—å.'
            self.current_test = random.choice(self.FOOD)
            message += f' –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: —Å—ä–µ–ª–∏ –ª–∏ –±—ã –≤—ã {self.current_test[1]}?'
            return Response(message)
        self.state = 'dead'
        return Response(
            f'–ù–µ—Ç! {self.current_test[1]} –Ω–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ–ª—å–∑—è –µ—Å—Ç—å!'
            ' –í—ã –æ—Ç—Ä–∞–≤–∏–ª–∏—Å—å –∏ —É–º–µ—Ä–ª–∏.'
            '\n\n'
            '–î–æ —Å–≤–æ–µ–π —Å–º–µ—Ä—Ç–∏ –≤—ã —É—Å–ø–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞'
            f' {countable(self.n_correct, "–≤–æ–ø—Ä–æ—Å", "–≤–æ–ø—Ä–æ—Å–∞", "–≤–æ–ø—Ä–æ—Å–æ–≤")}.'
            ' –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, {–Ω–∞–ø–∏—à–∏—Ç–µ}{—Å–∫–∞–∂–∏—Ç–µ} "–æ–∂–∏—Ç—å"{,}{.} —á—Ç–æ–±—ã –≤—ã–π—Ç–∏'
            ' {–Ω–∞–ø–∏—à–∏—Ç–µ}{—Å–∫–∞–∂–∏—Ç–µ} "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ".'
        )

    @StateMachine.input({'–æ–∂–∏—Ç—å'})
    @StateMachine.input({'–∂–∏—Ç—å'})
    @StateMachine.input({'–∂–∏—Ç—å'})
    @StateMachine.need_state('dead')
    def resurrect(self):
        return self.start()

    @StateMachine.input({'–≤—ã–±—Ä–æ—à—É'})
    @StateMachine.input({'–Ω–µ—Ç'})
    @StateMachine.need_state('playing')
    def throw(self):
        if not self.current_test[0]:
            self.n_correct += 1
            message = f'–ü—Ä–∞–≤–∏–ª—å–Ω–æ! {self.current_test[1]} –∫—É—à–∞—Ç—å –Ω–µ–ª—å–∑—è.'
            self.current_test = random.choice(self.FOOD)
            message += f' –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: —Å—ä–µ–ª–∏ –ª–∏ –±—ã –≤—ã {self.current_test[1]}?'
            return Response(message)
        self.state = 'wrong'
        return Response(
            f'–ö–∞–∫ –∂–µ —Ç–∞–∫! –í—ã —Ä–µ—à–∏–ª–∏ –≤—ã–±—Ä–æ—Å–∏—Ç—å {self.current_test[1]}.'
            ' –ê –≤ –ê—Ñ—Ä–∏–∫–µ –¥–µ—Ç–∏ –æ—Ç –≥–æ–ª–æ–¥–∞ —É–º–∏—Ä–∞—é—Ç. –í—ã –≤–æ–æ–±—â–µ –∑–Ω–∞–µ—Ç–µ{}{,} –∫–∞–∫ –ª—é–¥–∏'
            ' –≤ –±–ª–æ–∫–∞–¥—É –∂–∏–ª–∏?!'
            '\n\n'
            '–î–æ —ç—Ç–æ–≥–æ –≤–∞—Ä–≤–∞—Ä—Å–∫–æ–≥–æ –ø–æ—Å—Ç—É–ø–∫–∞ –≤—ã —É—Å–ø–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞'
            f' {countable(self.n_correct, "–≤–æ–ø—Ä–æ—Å", "–≤–æ–ø—Ä–æ—Å–∞", "–≤–æ–ø—Ä–æ—Å–æ–≤")}.'
            ' –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, {–Ω–∞–ø–∏—à–∏—Ç–µ}{—Å–∫–∞–∂–∏—Ç–µ} "–∏–∑–≤–∏–Ω–∏—Ç–µ"{,}{.} —á—Ç–æ–±—ã –≤—ã–π—Ç–∏'
            ' {–Ω–∞–ø–∏—à–∏—Ç–µ}{—Å–∫–∞–∂–∏—Ç–µ} "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ".'
        )

    @StateMachine.input({'–∏–∑–≤–∏–Ω–∏—Ç–µ'})
    @StateMachine.need_state('wrong')
    def apologise(self):
        return self.start()

    @StateMachine.input({'–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'})
    @StateMachine.input({'–≤—ã–π—Ç–∏'})
    def enough(self):
        raise EndSession('–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞.')


# TETRIS:

class Tetris(StateMachine):
    similar = {
        '–Ω–∞–ª–µ–≤–æ': ['–ª–µ–≤–æ', '–≤–ª–µ–≤–æ'],
        '–Ω–∞–ø—Ä–∞–≤–æ': ['–ø—Ä–∞–≤–æ', '–≤–ø—Ä–∞–≤–æ'],
        '–≤–Ω–∏–∑': ['–Ω–∏–∑'],
    }

    def start(self):
        self.field = TetrisField()
        message = (
            '–ò–≥—Ä–∞–µ–º –≤ —Ç–µ—Ç—Ä–∏—Å! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: "–Ω–∞–ª–µ–≤–æ", "–Ω–∞–ø—Ä–∞–≤–æ", "–≤–Ω–∏–∑",'
            ' "–ø–æ–≤–æ—Ä–æ—Ç" (–ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏). –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'
            ' –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–ª–∏—Ç–∫–∏, –Ω–∞–ø–∏—à–∏—Ç–µ "–ø–ª–∏—Ç–∫–∏".\n\n'
        )
        return Response(
            message + self.field.emoji(),
            tts=message
        )

    @StateMachine.input({'–ø–ª–∏—Ç–∫–∏'})
    def bw_emoji(self):
        self.field.emoji_ = ['‚¨ú', '‚¨õ', '‚¨õ', '‚¨õ', '‚¨õ', '‚¨õ', '‚¨õ', '‚¨õ', '‚¨õ']
        return self.field.emoji()

    @StateMachine.input({'–Ω–∞–ª–µ–≤–æ'})
    def left(self):
        if self.field.loss():
            raise EndSession('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.')
        self.field.left()
        self.field.step()
        return self.field.emoji()

    @StateMachine.input({'–Ω–∞–ø—Ä–∞–≤–æ'})
    def right(self):
        if self.field.loss():
            raise EndSession('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.')
        self.field.right()
        self.field.step()
        return self.field.emoji()

    @StateMachine.input({'–≤–Ω–∏–∑'})
    def down(self):
        if self.field.loss():
            raise EndSession('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.')
        self.field.multistep()
        return self.field.emoji()

    @StateMachine.input({'–ø–æ–≤–æ—Ä–æ—Ç'})
    def rotate(self):
        if self.field.loss():
            raise EndSession('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.')
        self.field.rotate()
        self.field.step()
        return self.field.emoji()

    @StateMachine.input({'–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'})
    @StateMachine.input({'–≤—ã–π—Ç–∏'})
    def enough(self):
        raise EndSession('–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞.')


# Snake:

class Snake(StateMachine):
    similar = {
        '–Ω–∞–ª–µ–≤–æ': ['–ª–µ–≤–æ', '–≤–ª–µ–≤–æ'],
        '–Ω–∞–ø—Ä–∞–≤–æ': ['–ø—Ä–∞–≤–æ', '–≤–ø—Ä–∞–≤–æ'],
        '–≤–Ω–∏–∑': ['–Ω–∏–∑'],
        '–≤–≤–µ—Ä—Ö': ['–≤–µ—Ä—Ö'],
    }

    def start(self):
        self.field = SnakeField()
        message = (
            '–ò–≥—Ä–∞–µ–º –≤ –∑–º–µ–π–∫—É! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: "–Ω–∞–ª–µ–≤–æ", "–Ω–∞–ø—Ä–∞–≤–æ", "–≤–Ω–∏–∑",'
            ' "–≤–≤–µ—Ä—Ö". –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'
            ' –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–ª–∏—Ç–∫–∏, –Ω–∞–ø–∏—à–∏—Ç–µ "–ø–ª–∏—Ç–∫–∏".\n\n'
        )
        return Response(
            message + self.field.emoji(),
            tts=message
        )

    @StateMachine.input({'–ø–ª–∏—Ç–∫–∏'})
    def bw_emoji(self):
        self.field.emoji_ = ['‚¨ú', '‚¨õ', 'üêç', 'üî¥', 'üí•']
        return self.field.emoji()

    @StateMachine.input({'–Ω–∞–ª–µ–≤–æ'})
    def left(self):
        self.field.left()
        ret = self.field.emoji()
        if self.field.loss():
            raise EndSession(f'{ret}\n\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.')
        return ret

    @StateMachine.input({'–Ω–∞–ø—Ä–∞–≤–æ'})
    def right(self):
        self.field.right()
        ret = self.field.emoji()
        if self.field.loss():
            raise EndSession(f'{ret}\n\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.')
        return ret

    @StateMachine.input({'–≤–≤–µ—Ä—Ö'})
    def up(self):
        self.field.up()
        ret = self.field.emoji()
        if self.field.loss():
            raise EndSession(f'{ret}\n\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.')
        return ret

    @StateMachine.input({'–≤–Ω–∏–∑'})
    def down(self):
        self.field.down()
        ret = self.field.emoji()
        if self.field.loss():
            raise EndSession(f'{ret}\n\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.')
        return ret

    @StateMachine.input({'–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'})
    @StateMachine.input({'–≤—ã–π—Ç–∏'})
    def enough(self):
        raise EndSession('–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞.')


# GREETER:

class Greeter(StateMachine):
    similar = {
        '—Å—ä–µ–¥–æ–±–Ω–æ': '—Å—ä–µ–¥–æ–±–Ω–æ–µ'
    }

    @StateMachine.input({'–æ—á–∫–æ'})
    def start_quiz(self):
        game = Game21()
        self.inhabit(game)
        return game.start()

    @StateMachine.input({'—Å—ä–µ–¥–æ–±–Ω–æ'})
    def start_foodornot(self):
        game = FoodOrNot()
        self.inhabit(game)
        return game.start()

    @StateMachine.input({'—Ç–µ—Ç—Ä–∏—Å'})
    @StateMachine.input({'tetris'})
    def start_tetris(self):
        game = Tetris()
        self.inhabit(game)
        return game.start()

    @StateMachine.input({'–∑–º–µ–π–∫–∞'})
    def start_snake(self):
        game = Snake()
        self.inhabit(game)
        return game.start()

    @StateMachine.input()
    def greet(self):
        return Response(
            text=(
                '–ü—Ä–∏–≤–µ—Ç!!!!! –ú—ã –∫–æ–º–∞–Ω–¥–∞ SOFT SQUAD!!!!!!!!!'
                ' –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∏–≥—Ä: "^–æ—á–∫`–æ^", "^—Å—ä–µ–¥`–æ–±–Ω–æ^", "—Ç–µ—Ç—Ä–∏—Å" –∏–ª–∏ "–∑–º–µ–π–∫–∞".'),
            tts=(
                '–ü—Ä–∏–≤–µ—Ç!! –ú—ã –∫–æ–º–∞–Ω–¥–∞ SOFT SQUAD!!'
                ' <speaker audio=marusia-sounds/things-sword-1> '
                ' <speaker audio=marusia-sounds/things-gun-1> '
                ' –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∏–≥—Ä: "^–æ—á–∫`–æ^", "^—Å—ä–µ–¥`–æ–±–Ω–æ^", "—Ç–µ—Ç—Ä–∏—Å" –∏–ª–∏ "–∑–º–µ–π–∫–∞".'),
        )


statemachines = defaultdict(Greeter)


app = FastAPI()


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request, exc):
    logger.error(str(exc))
    return PlainTextResponse('', status_code=400)


@app.post('/marusya')
async def read_root(req: Item):
    resp = statemachines[req.session.session_id].parse(req.request)

    if isinstance(resp, Response):
        resp = resp.json()
    elif isinstance(resp, str):
        resp = {
            'text': resp,
            'end_session': False,
        }
    else:
        text, buttons = resp
        resp = {
            'text': text,
            'buttons': [{'title': b} for b in buttons],
            'end_session': False,
        }

    return {
        'response': resp,
        'session': req.session,
        'version': req.version,
    }
